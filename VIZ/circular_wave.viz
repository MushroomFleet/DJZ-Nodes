import numpy as np
import cv2

def render(features, width, height, color_palette):
    """
    Renders a circular wave visualization with audio-reactive rings.
    
    Args:
        features (dict): Audio features including 'waveform', 'spectrum', 'bass', 'mids', 'highs'
        width (int): Output image width
        height (int): Output image height
        color_palette (list): List of (R,G,B) tuples for colors
        
    Returns:
        numpy.ndarray: RGB image of the visualization
    """
    image = np.zeros((height, width, 3), dtype=np.uint8)
    center_x, center_y = width // 2, height // 2
    
    # Create circular waves based on audio features
    max_radius = min(width, height) // 2
    num_circles = 32
    
    # Create base modulation factors from audio features
    bass_mod = 1 + features['bass'] * 0.5
    mids_mod = 1 + features['mids'] * 0.3
    highs_mod = features['highs'] * 0.2
    
    for i in range(num_circles):
        # Calculate base radius and thickness
        radius = int(max_radius * (i / num_circles))
        thickness = max(1, int(radius * 0.1))
        
        # Modulate radius with audio features
        phase = (i / num_circles) * 2 * np.pi
        radius_mod = radius * (
            bass_mod * np.sin(phase) +
            mids_mod * np.cos(phase * 2) +
            (1 + highs_mod * np.sin(phase * 4))
        )
        
        # Calculate color based on audio reactivity
        color_idx = int((i / num_circles + features['mids']) * len(color_palette)) % len(color_palette)
        color = color_palette[color_idx]
        
        # Draw the circle
        cv2.circle(image, (center_x, center_y), int(radius_mod), color, thickness)
        
        # Add subtle glow effect for high frequencies
        if features['highs'] > 0.5:
            glow_radius = int(radius_mod + thickness)
            cv2.circle(image, (center_x, center_y), glow_radius, color, 1)
    
    return image
