import cv2
import numpy as np

class PipesScreensaver:
    def __init__(self):
        self.name = "Pipes"
        self.description = "3D pipes screensaver effect"
        self.parameters = {
            "pipe_thickness": {
                "type": "INT",
                "default": 5,
                "min": 1,
                "max": 20,
                "step": 1
            },
            "pipe_spawn_rate": {
                "type": "INT",
                "default": 20,
                "min": 5,
                "max": 50,
                "step": 1
            },
            "pipe_speed": {
                "type": "FLOAT",
                "default": 5.0,
                "min": 1.0,
                "max": 15.0,
                "step": 0.5
            }
        }
        
    def init_state(self):
        return {
            'pipes': [],
            'next_pipe': 0
        }
        
    def render(self, width, height, frame, colors, speed, state, params):
        """Render 3D pipes screensaver"""
        if not state:
            state = self.init_state()
        
        img = np.zeros((height, width, 3), dtype=np.uint8)
        
        # Update existing pipes
        for pipe in state['pipes']:
            # Update pipe position and draw
            pipe['length'] += speed * params['pipe_speed']
            cv2.line(img, 
                    (int(pipe['start'][0]), int(pipe['start'][1])),
                    (int(pipe['start'][0] + pipe['dir'][0] * pipe['length']),
                     int(pipe['start'][1] + pipe['dir'][1] * pipe['length'])),
                    colors[pipe['color_idx']], 
                    thickness=params['pipe_thickness'])
        
        # Add new pipe occasionally
        state['next_pipe'] -= 1
        if state['next_pipe'] <= 0:
            state['pipes'].append({
                'start': (np.random.randint(0, width), np.random.randint(0, height)),
                'dir': (np.random.rand() * 2 - 1, np.random.rand() * 2 - 1),
                'length': 0,
                'color_idx': np.random.randint(0, len(colors))
            })
            state['next_pipe'] = params['pipe_spawn_rate']
        
        # Remove old pipes
        state['pipes'] = [p for p in state['pipes'] if p['length'] < max(width, height)]
        
        return img, state
