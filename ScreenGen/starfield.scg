import cv2
import numpy as np

class StarfieldScreensaver:
    def __init__(self):
        self.name = "Starfield"
        self.description = "Classic starfield screensaver effect"
        self.parameters = {
            "star_count": {
                "type": "INT",
                "default": 100,
                "min": 10,
                "max": 1000,
                "step": 10
            },
            "star_size_multiplier": {
                "type": "FLOAT",
                "default": 1.0,
                "min": 0.1,
                "max": 3.0,
                "step": 0.1
            },
            "star_speed_multiplier": {
                "type": "FLOAT",
                "default": 1.0,
                "min": 0.1,
                "max": 5.0,
                "step": 0.1
            },
            "star_brightness": {
                "type": "FLOAT",
                "default": 1.0,
                "min": 0.1,
                "max": 2.0,
                "step": 0.1
            }
        }
        
    def init_state(self):
        return {
            'stars': []
        }
        
    def render(self, width, height, frame, colors, speed, state, params):
        """Render starfield screensaver"""
        if not state:
            state = self.init_state()
            for _ in range(params['star_count']):
                state['stars'].append({
                    'x': np.random.randint(0, width),
                    'y': np.random.randint(0, height),
                    'z': np.random.randint(1, 100)
                })
        
        img = np.zeros((height, width, 3), dtype=np.uint8)
        
        for star in state['stars']:
            # Update z position with custom speed
            star['z'] -= speed * params['star_speed_multiplier']
            if star['z'] <= 0:
                star['x'] = np.random.randint(0, width)
                star['y'] = np.random.randint(0, height)
                star['z'] = 100
            
            # Project star position with custom size and brightness
            size = int(1 + (100 - star['z']) / 20 * params['star_size_multiplier'])
            color_idx = min(len(colors)-1, size-1)
            
            # Apply brightness modifier to the color
            color = list(colors[color_idx])
            color = [int(min(255, c * params['star_brightness'])) for c in color]
            
            cv2.circle(img, (int(star['x']), int(star['y'])), size, color, -1)
        
        return img, state
